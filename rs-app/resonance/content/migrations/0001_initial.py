# Generated by Django 2.2.9 on 2020-03-07 14:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AssesmentAttemptQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('action', models.PositiveSmallIntegerField(choices=[(1, 'Attempted'), (2, 'Skipped'), (3, 'Visited')], default=2)),
                ('is_correct', models.NullBooleanField()),
                ('time_taken', models.FloatField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('type', models.SmallIntegerField(choices=[(1, 'Exercise'), (2, 'Daily Practice Problems'), (3, 'Solved Examples')], default=0)),
                ('title', models.CharField(blank=True, max_length=120, null=True)),
                ('uid', models.CharField(max_length=20, unique=True)),
                ('timed_type', models.SmallIntegerField(choices=[(0, 'None'), (1, 'Timed on Total'), (2, 'Timed on Questions')], default=0)),
                ('reset_time_every_attempt', models.BooleanField(default=True)),
                ('timed_duration_mins', models.IntegerField(default=0)),
                ('total_marks', models.IntegerField(default=0)),
                ('passing_marks', models.IntegerField(default=0)),
                ('attempts_allowed', models.IntegerField(default=0, help_text='0 is for unlimited attempts')),
                ('is_graded', models.BooleanField(default=False)),
                ('closed_after_passing', models.BooleanField(default=False)),
                ('difficulty', models.SmallIntegerField(choices=[(0, 'Easy'), (1, 'Medium'), (2, 'Hard'), (3, 'Very Hard')], default=0)),
                ('result_after', models.SmallIntegerField(choices=[(0, 'Never'), (1, 'Every Question'), (2, 'Assessment Passing'), (3, 'All Attempts'), (4, 'Every Attempt'), (5, 'Not Applicable')], default=0)),
                ('allowed_after_duedate', models.BooleanField(default=False)),
                ('instructions', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('show_solution_after', models.PositiveSmallIntegerField(choices=[(0, 'Never'), (1, 'Every Question'), (2, 'Assessment Passing'), (3, 'All Attempts'), (4, 'Every Attempt'), (5, 'Default Open')], default=2)),
                ('is_negative', models.BooleanField(default=False)),
                ('total_questions', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('total_questions', models.FloatField(null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('marks_obtained', models.FloatField(default=0)),
                ('is_passed', models.BooleanField(default=True)),
                ('submit_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_latest', models.BooleanField(default=False)),
                ('is_dynamic', models.BooleanField(default=False)),
                ('is_faculty_reviewed', models.BooleanField(default=False)),
                ('reviewed_date', models.DateField(blank=True, null=True)),
                ('is_submitted', models.NullBooleanField()),
                ('submission_reason', models.TextField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('title', models.CharField(blank=True, max_length=120, null=True)),
                ('negative_marking_per_q', models.IntegerField(default=0)),
                ('instructions', models.TextField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentSectionQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('negative_marking_per_q', models.IntegerField(default=0)),
                ('order', models.IntegerField(default=0)),
                ('duration_seconds', models.IntegerField(default=0)),
                ('marks', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Concept')),
                ('slug', models.SlugField(editable=False, verbose_name='Concept slug')),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('title', models.CharField(blank=True, max_length=120, null=True)),
                ('unique_code', models.CharField(blank=True, max_length=120, null=True)),
                ('content_type', models.SmallIntegerField(choices=[(1, 'Study Material'), (2, 'Assessment')], default=0)),
                ('content_subtype', models.SmallIntegerField(choices=[(1, 'Exercise'), (2, 'Daily Practice Problems'), (3, 'Solved Examples'), (4, 'Notes'), (5, 'Video')], default=0)),
                ('description', models.TextField(blank=True, null=True)),
                ('faculty_releasable', models.BooleanField(default=False)),
                ('faculty_only', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContentTOCMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('title', models.CharField(blank=True, max_length=120, null=True)),
                ('unique_code', models.CharField(blank=True, max_length=120, null=True)),
                ('content_type', models.SmallIntegerField(choices=[(1, 'Study Material'), (2, 'Assessment')], default=0)),
                ('content_subtype', models.SmallIntegerField(choices=[(1, 'Exercise'), (2, 'Daily Practice Problems'), (3, 'Solved Examples'), (4, 'Notes'), (5, 'Video')], default=0)),
                ('level', models.SmallIntegerField(choices=[(1, 'Unit'), (2, 'Chapter'), (3, 'Topic'), (4, 'Sub Topic'), (10, 'Class'), (20, 'Subject')], default=0)),
                ('ref_id', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DPPPlanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('title', models.CharField(blank=True, max_length=120, null=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('duration_mins', models.IntegerField(default=0)),
                ('is_tentative', models.BooleanField(default=True)),
                ('is_released', models.BooleanField(default=False)),
                ('sequence_no', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('title', models.CharField(blank=True, default='Lecture Title', max_length=120, null=True)),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('duration_hrs', models.IntegerField(default=0)),
                ('room', models.CharField(blank=True, default='Room Number #', help_text='The class where lecture is happening', max_length=120, null=True)),
                ('is_tentative', models.BooleanField(default=False)),
                ('is_delivered', models.BooleanField(default=False)),
                ('sequence_no', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LectureTOCContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('faculty_releasable', models.BooleanField(default=False)),
                ('is_released', models.BooleanField(default=False)),
                ('delivered_status', models.SmallIntegerField(choices=[(0, 'Not Started'), (1, 'Completed'), (2, 'Not Completed')], default=0)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LectureTOCMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('level', models.SmallIntegerField(choices=[(0, 'Unit'), (1, 'Chapter'), (2, 'Topic'), (3, 'Subtopic')])),
                ('delivered_status', models.SmallIntegerField(choices=[(0, 'Not Started'), (1, 'Completed'), (2, 'Not Completed')], default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotesAccessLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('checked_pages', models.CharField(blank=True, max_length=520, null=True)),
                ('last_page', models.SmallIntegerField(default=0)),
                ('start_date_time', models.DateTimeField(blank=True, null=True)),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('uid', models.CharField(blank=True, help_text='The unique identifier of question', max_length=120, null=True, unique=True)),
                ('question_type', models.SmallIntegerField(choices=[(1, 'Multiple Choice Questions'), (2, 'Single Integer Questions'), (3, 'Multiple Response Questions'), (4, 'Fill in the Blanks'), (5, 'True False'), (6, 'Subjective')], default=0)),
                ('duration_seconds', models.IntegerField(default=0)),
                ('marks', models.IntegerField(default=0)),
                ('negative_marking', models.FloatField(default=0)),
                ('source', models.SmallIntegerField(blank=True, choices=[(1, 'Exercise'), (2, 'Daily Practice Problems'), (3, 'Solved Examples')], default=0, null=True)),
                ('difficulty', models.SmallIntegerField(choices=[(0, 'Easy'), (1, 'Medium'), (2, 'Hard'), (3, 'Very Hard')], default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('is_correct', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionOptionsExplanation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('explanation', models.TextField()),
                ('video', models.FileField(blank=True, null=True, upload_to='study_material/question/solution/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionOptionsStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('statement', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('statement', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionTOCMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('level', models.SmallIntegerField(choices=[(0, 'Unit'), (1, 'Chapter'), (2, 'Topic'), (3, 'Subtopic')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudyMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('type', models.SmallIntegerField(choices=[(0, 'Notes'), (1, 'Video')], default=0)),
                ('title', models.CharField(blank=True, max_length=120, null=True)),
                ('downloadable', models.BooleanField(default=False)),
                ('faculty_only', models.BooleanField(default=False)),
                ('duration_mins', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudyMaterialFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publish_status', models.SmallIntegerField(choices=[(0, 'Draft'), (1, 'Published')], default=0)),
                ('content', models.TextField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='study_material/notes/')),
            ],
        ),
        migrations.CreateModel(
            name='UserConcept',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoAccessLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('object_status', models.SmallIntegerField(choices=[(1, 'Deleted'), (0, 'Active')], default=0)),
                ('file_duration_viewed', models.SmallIntegerField(default=0)),
                ('start_date_time', models.DateTimeField(blank=True, null=True)),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.Content')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.StudyMaterialFile')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
